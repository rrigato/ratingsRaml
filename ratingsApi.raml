#%RAML 1.0
---
title: Toonami Ratings API
#baseUri: http://jukebox.api.com
baseUri: http://toonamiratings.com
version: v1

types:
    show: !include schemas/rating.schema

resourceTypes:
    collection:
        description: |
             Collection of available <<resourcePathName>> for toonami ratings.
        get:
            description: Get a list of <<resourcePathName>>.
            responses:
                #if we can find the show or date
                200:
                    body:
                        application/json:
                            example: |
                                <<exampleCollection>>

                #If we are unable to find a show or date
                404:
                    body:
                        application/json:
                            example: |
                                {"message": "<<resourcePathName|!singularize>> not found"}

    collection-item:
        description: Entity representing a <<resourcePathName|!singularize>>
        get:
            description: |
                Get the <<resourcePathName|!singularize>>
                with <<resourcePathName|!singularize>>Id =
                {<<resourcePathName|!singularize>>Id}
            responses:
                200:
                    body:
                        application/json:
                            example: |
                                <<exampleItem>>
                404:
                    body:
                        application/json:
                            example: |
                                {"message": "<<resourcePathName|!singularize>> not found" }




traits:
    searchable:
        queryParameters:
            #The queryName will be either a specific date being searched for
            #or a show
            <<queryName>>:
                required: false
                description: |
                     <<description>>
                example: |
                    <<example>>


    orderable:
        queryParameters:
            orderBy:
                description: |
                    Order by field: <<fieldsList>>
                type: string
                required: false
            order:
                description: Order
                enum: [desc, asc]
                default: desc
                required: false
    pageable:
        queryParameters:
            offset:
                description: Skip over a number of elements by specifying an offset value for the query
                type: integer
                required: false
                example: 20
                default: 0
            limit:
                description: Limit the number of elements on the response
                type: integer
                required: false
                example: 80
                default: 10


/ratings:
    type:
        #giving an example of the array of schemas/rating.schema
        #json objects that will be returned
        collection:
            exampleCollection: !include examples/saturday.json
    get:
        #calling a trait
        is:
            [
                #This is if the client wants a specific show
                searchable:{
                    queryName:
                        "show",
                    description:
                        "Give a show name and this will return the first 20 rating elements",
                    example:
                        "One Punch Man"
                },
                #This is if the client wants a specific date
                searchable:{
                    queryName:
                        "saturday",
                    description:
                        "Provide the date you want toonami ratings for
                        must be in YYYY-MM-DD format",
                    example:
                        "2014-01-04"

                }
            ]
    delete:
        description: |
            Deletes a ratings instance from the database

            Must pass a Date or a Show in the header parameters for
            the delete to be successfull
        headers:
            show:
                required: true
                description: |
                    Provides the name of the show to be deleted

                    If we delete GXP we can pretend like that show never happened
                    :)
                example: |
                    "Tenchi Muyo GXP"

            saturday:
                required: true
                description: |
                    Provides the date of the show to be deleted

                    Note that this must be in YYYY-MM-DD
                example: |
                        "2012-11-10"
        responses:
            204:
                body:
                    application/json:

                        example: |
                            {

                                "sucess":true

                            }
    post:
        description: |
            Adds a new ratings json object to the database

            jsonSchema: The json schema the HTTP Request Body must follow

            exampleJson: An Example of a json objec that complies with
            jsonSchema
        body:
            application/json:
                examples:
                        jsonSchema:
                            !include schemas/rating.schema
                        exampleJson:
                            !include  examples/show.json
